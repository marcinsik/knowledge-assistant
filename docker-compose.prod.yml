# docker-compose.prod.yml

services:
  # Baza danych PostgreSQL z rozszerzeniem pgvector dla wektor√≥w embeddings
  db:
    image: ankane/pgvector:v0.5.1
    environment:
      POSTGRES_DB: knowledge_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Cache Redis dla sesji i tymczasowych danych
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Serwis backend (FastAPI + Python)
  backend:
    build: ./backend
    volumes:
      - backend_uploads:/app/app/uploaded_pdfs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/knowledge_db
      REDIS_URL: redis://redis:6379
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
    restart: unless-stopped

  # Serwis frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  pg_data:
  backend_uploads:

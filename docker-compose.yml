# docker-compose.yml


services:
  # Baza danych PostgreSQL z rozszerzeniem pgvector dla wektorów embeddings
  db:
    image: ankane/pgvector:v0.5.1
    environment:
      POSTGRES_DB: knowledge_db      # Nazwa bazy danych
      POSTGRES_USER: user           # Użytkownik bazy danych
      POSTGRES_PASSWORD: password   # Hasło do bazy danych
    volumes:
      - pg_data:/var/lib/postgresql/data # Trwałe przechowywanie danych
    ports:
      - "5432:5432"  # Mapowanie portu PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Cache Redis dla sesji i tymczasowych danych
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"  # Mapowanie portu Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Serwis backend (FastAPI + Python)
  backend:
    build: ./backend              # Budowanie z lokalnego Dockerfile
    volumes:
      - ./backend:/app            # Montowanie kodu dla development
    ports:
      - "8000:8000"              # Mapowanie portu API
    depends_on:
      db:
        condition: service_healthy    # Czeka na gotowość bazy danych
      redis:
        condition: service_healthy    # Czeka na gotowość Redis
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/knowledge_db
      REDIS_URL: redis://redis:6379

  # Serwis frontend (React - tryb deweloperski)
  frontend:
    # Określ, skąd budować obraz i który Dockerfile użyć.
    # Właściwości 'context' i 'dockerfile' muszą być zagnieżdżone pod 'build'.
    build:
      context: ./frontend
      dockerfile: DockerFile.dev # Użyj pliku DockerFile.dev

    # Mapowanie portów: HOST_PORT:CONTAINER_PORT
    # Serwer deweloperski Reacta domyślnie nasłuchuje na porcie 3000 w kontenerze.
    # Mapujemy go na port 3000 na Twoim hoście.
    ports:
      - "3000:3000"

    # --- KLUCZOWE DLA HOT-RELOADING I DEVELOPOMENTU ---
    volumes:
      # 1. Mapuj lokalny katalog z kodem Reacta do katalogu /app w kontenerze.
      #    Dzięki temu zmiany w plikach na Twoim komputerze są od razu widoczne w kontenerze.
      - ./frontend:/app
      # 2. Utwórz oddzielny wolumen dla node_modules Wewnątrz kontenera.
      #    Jest to ważne, aby zależności były zainstalowane w kontenerze i nie kolidowały
      #    z lokalnymi node_modules, które mogą mieć specyficzne dla OS pliki.
      - /app/node_modules

    # Zmienne środowiskowe dla kontenera frontend.
    environment:
      # Opcjonalnie: CHOKIDAR_USEPOLLING=true jest często potrzebne na macOS i Windows (WSL1),
      # aby serwer deweloperski Reacta poprawnie wykrywał zmiany plików w zmapowanych wolumenach.
      # Jeśli hot-reloading nie działa, odkomentuj tę linię.
      # - CHOKIDAR_USEPOLLING=true

      # Upewnij się, że Twoja aplikacja React zna adres URL Twojego backendu.
      # "backend" to nazwa serwisu backendu w tym pliku docker-compose.yml.
      # Docker Compose tworzy wewnętrzną sieć, w której serwisy mogą komunikować się
      # używając swoich nazw jako nazw hostów.
      - REACT_APP_API_URL=http://127.0.0.1:8000 # Poprawiony URL, aby odwoływał się do serwisu backendu w sieci Docker Compose

    # Czeka na uruchomienie backendu
    depends_on:
      - backend

# Wolumeny dla trwałego przechowywania danych
volumes:
  pg_data:  # Wolumen dla danych PostgreSQL
